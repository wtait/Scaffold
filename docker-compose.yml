services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: lovable_clone
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO (S3-compatible object storage)
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/lovable_clone
      - STORAGE_TYPE=s3
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin123
      - AWS_ENDPOINT_URL=http://minio:9000
      - S3_BUCKET_NAME=lovable-clone-projects
      - SANDBOX_TYPE=docker
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker sandbox manager
      - ./projects:/app/projects  # Local storage fallback
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: >
      sh -c "
        python -c 'from src.database import init_database; init_database()' &&
        python -m uvicorn src.websocket_server:app --host 0.0.0.0 --port 8000 --reload
      "

  # App Preview Sandbox (pre-built React environment for dynamic containers)
  app-preview-sandbox:
    build:
      context: .
      dockerfile: Dockerfile.sandbox
    image: app-preview-sandbox:latest
    command: /bin/true  # This service just builds the image and exits
    restart: "no"

  # Frontend (React app)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - VITE_BACKEND_WS_URL=ws://localhost:8000/ws
      - VITE_BACKEND_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - app-preview-sandbox
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Nginx reverse proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    profiles:
      - production

volumes:
  postgres_data:
  minio_data: